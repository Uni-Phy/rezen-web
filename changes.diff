diff -ur --ex src/views/dashboard/CarbonCreditEngineView.vue ../rezen-web/src/views/dashboard/CarbonCreditEngineView.vue
--- src/views/dashboard/CarbonCreditEngineView.vue	2025-08-04 20:36:37
+++ ../rezen-web/src/views/dashboard/CarbonCreditEngineView.vue	2025-08-05 01:42:36
@@ -1,160 +1,394 @@
 <template>
-  <div class="tab-content">
-    <h2 class="tab-title">Carbon Credit Engine</h2>
+  <div class="dashboard-container">
+    <h2 class="dashboard-title">Carbon Credit Engine</h2>
 
-    <div class="metrics-grid">
-      <div class="metric-card">
-        <h3>Carbon Sequestered (Tonnes)</h3>
-        <apexchart type="bar" :options="carbonSequesteredChartOptions" :series="carbonSequesteredSeries"></apexchart>
+    <!-- Section 1: LiDAR + Plot-Based Calibration -->
+    <div class="dashboard-section">
+      <h3>LiDAR + Plot-Based Calibration</h3>
+      <div class="kpi-grid">
+        <div class="kpi-card">
+          <p class="kpi-value">0.92</p>
+          <p class="kpi-label">Correlation Score (R-squared)</p>
+        </div>
+        <div class="kpi-card">
+          <p class="kpi-value">150</p>
+          <p class="kpi-label">Number of Calibration Plots</p>
+        </div>
       </div>
+      <div class="chart-grid">
+        <div class="chart-card">
+          <h4>LiDAR vs. Plot Data Scatter Plot</h4>
+          <apexchart type="scatter" :options="lidarScatterChartOptions" :series="lidarScatterSeries"></apexchart>
+        </div>
+        <div class="chart-card">
+          <h4>Biomass Density Heatmap (kg/ha)</h4>
+          <apexchart type="heatmap" :options="biomassHeatmapChartOptions" :series="biomassHeatmapSeries"></apexchart>
+        </div>
+        <div class="chart-card">
+          <h4>LiDAR vs. Ground-Truth Deviation</h4>
+          <apexchart type="bar" :options="deviationBarChartOptions" :series="deviationBarSeries"></apexchart>
+        </div>
+      </div>
+    </div>
 
-      <div class="metric-card">
-        <h3>MRV Eligibility Scoring</h3>
-        <apexchart type="radialBar" :options="mrvScoreChartOptions" :series="mrvScoreSeries"></apexchart>
+    <!-- Section 2: Baseline vs. Actual Carbon Sequestered -->
+    <div class="dashboard-section">
+      <h3>Baseline vs. Actual Carbon Sequestered</h3>
+      <div class="kpi-grid">
+        <div class="kpi-card">
+          <p class="kpi-value">12,500 tonnes</p>
+          <p class="kpi-label">Total Baseline Sequestered Carbon</p>
+        </div>
+        <div class="kpi-card">
+          <p class="kpi-value">13,200 tonnes</p>
+          <p class="kpi-label">Total Actual Sequestered Carbon</p>
+        </div>
       </div>
+      <div class="chart-grid">
+        <div class="chart-card">
+          <h4>Baseline vs. Actual Carbon Over Time</h4>
+          <apexchart type="line" :options="carbonLineChartOptions" :series="carbonLineSeries"></apexchart>
+        </div>
+        <div class="kpi-card single-value-card">
+          <p class="kpi-value">700 tonnes</p>
+          <p class="kpi-label">Performance Gap</p>
+        </div>
+      </div>
+    </div>
 
-      <div class="metric-card">
-        <h3>Credit Issuance Prediction</h3>
-        <p class="metric-value">1,500 - 1,800 Credits</p>
-        <p class="metric-description">Confidence Interval: 90%</p>
+    <!-- Section 3: Dynamic Control Area Generation -->
+    <div class="dashboard-section">
+      <h3>Dynamic Control Area Generation</h3>
+      <div class="kpi-grid">
+        <div class="kpi-card">
+          <p class="kpi-value">25</p>
+          <p class="kpi-label">Number of Generated Control Areas</p>
+        </div>
+        <div class="kpi-card">
+          <p class="kpi-value">50 ha</p>
+          <p class="kpi-label">Average Control Area Size</p>
+        </div>
       </div>
+      <div class="chart-grid">
+        <div class="chart-card">
+          <h4>Project & Control Area Map</h4>
+          <!-- Placeholder for Map Component -->
+          <div class="map-placeholder">Map visualization here</div>
+        </div>
+        <div class="chart-card">
+          <h4>Control vs. Restoration Area Characteristics</h4>
+          <apexchart type="bar" :options="characteristicsBarChartOptions" :series="characteristicsBarSeries"></apexchart>
+        </div>
+      </div>
+    </div>
 
-      <div class="metric-card">
-        <h3>LiDAR + Plot-based Calibration</h3>
-        <p class="metric-description">Data calibrated and verified.</p>
+    <!-- Section 4: Real-time MRV (Measurement, Reporting & Verification) Eligibility Scoring -->
+    <div class="dashboard-section">
+      <h3>Real-time MRV (Measurement, Reporting & Verification) Eligibility Scoring</h3>
+      <div class="kpi-grid">
+        <div class="kpi-card">
+          <apexchart type="radialBar" :options="mrvScoreChartOptions" :series="mrvScoreSeries"></apexchart>
+          <p class="kpi-label">Real-time Eligibility Score</p>
+        </div>
       </div>
+      <div class="chart-grid">
+        <div class="chart-card">
+          <h4>Eligibility Score Trend</h4>
+          <apexchart type="line" :options="mrvTrendChartOptions" :series="mrvTrendSeries"></apexchart>
+        </div>
+        <div class="chart-card">
+          <h4>Contributing Factors</h4>
+          <apexchart type="radar" :options="contributingFactorsChartOptions" :series="contributingFactorsSeries"></apexchart>
+        </div>
+      </div>
     </div>
+
+    <!-- Section 5: Credit Issuance Prediction with Confidence Intervals -->
+    <div class="dashboard-section">
+      <h3>Credit Issuance Prediction with Confidence Intervals</h3>
+      <div class="kpi-grid">
+        <div class="kpi-card">
+          <p class="kpi-value">1,750</p>
+          <p class="kpi-label">Predicted Carbon Credits (Next 12 Months)</p>
+        </div>
+      </div>
+      <div class="chart-grid">
+        <div class="chart-card">
+          <h4>Predicted Credit Issuance with Confidence Interval</h4>
+          <apexchart type="line" :options="predictionLineChartOptions" :series="predictionLineSeries"></apexchart>
+        </div>
+        <div class="chart-card">
+          <h4>Actual vs. Predicted Credit Issuance</h4>
+          <apexchart type="bar" :options="historicalComparisonChartOptions" :series="historicalComparisonSeries"></apexchart>
+        </div>
+      </div>
+    </div>
   </div>
 </template>
 
 <script>
 import { ref } from 'vue';
+import VueApexCharts from 'vue3-apexcharts';
 
 export default {
   name: 'CarbonCreditEngineView',
+  components: {
+    apexchart: VueApexCharts,
+  },
   setup() {
-    const carbonSequesteredSeries = ref([
+    // Helper to get CSS variables
+    const getCssVar = (name) => getComputedStyle(document.documentElement).getPropertyValue(name);
+
+    // Section 1: LiDAR + Plot-Based Calibration
+    const lidarScatterSeries = ref([
       {
-        name: 'Baseline',
-        data: [100, 120, 110, 130, 125, 140],
+        name: 'LiDAR vs. Plot Data',
+        data: [
+          { x: 10, y: 12 }, { x: 20, y: 22 }, { x: 30, y: 31 }, { x: 40, y: 43 }, { x: 50, y: 50 },
+          { x: 60, y: 61 }, { x: 70, y: 73 }, { x: 80, y: 80 }, { x: 90, y: 92 }, { x: 100, y: 101 },
+        ],
       },
-      {
-        name: 'Actual',
-        data: [110, 130, 125, 145, 135, 150],
-      },
     ]);
+    const lidarScatterChartOptions = ref({
+      chart: { type: 'scatter', height: 350, toolbar: { show: false } },
+      xaxis: {
+        title: { text: 'Manual Plot Data' },
+        labels: { style: { colors: getCssVar('--chart-label-color') } },
+      },
+      yaxis: {
+        title: { text: 'LiDAR Data' },
+        labels: { style: { colors: getCssVar('--chart-label-color') } },
+      },
+      colors: [getCssVar('--color-primary')],
+      grid: { borderColor: '#444' },
+      tooltip: { theme: 'dark' },
+    });
 
-    const carbonSequesteredChartOptions = ref({
-      chart: {
-        type: 'bar',
-        height: 250,
-        toolbar: {
-          show: false,
-        },
+    const biomassHeatmapSeries = ref([
+      { name: 'Zone 1', data: [{ x: 'A', y: 10 }, { x: 'B', y: 20 }, { x: 'C', y: 30 }] },
+      { name: 'Zone 2', data: [{ x: 'A', y: 40 }, { x: 'B', y: 50 }, { x: 'C', y: 60 }] },
+      { name: 'Zone 3', data: [{ x: 'A', y: 70 }, { x: 'B', y: 80 }, { x: 'C', y: 90 }] },
+    ]);
+    const biomassHeatmapChartOptions = ref({
+      chart: { type: 'heatmap', height: 350, toolbar: { show: false } },
+      dataLabels: { enabled: false },
+      colors: ["#008FFB", "#00E396", "#FEB019", "#FF4560", "#775DD0"],
+      xaxis: {
+        type: 'category',
+        labels: { style: { colors: getCssVar('--chart-label-color') } },
       },
-      colors: [
-        getComputedStyle(document.documentElement).getPropertyValue('--color-secondary'),
-        getComputedStyle(document.documentElement).getPropertyValue('--color-primary')
-      ],
-      plotOptions: {
-        bar: {
-          horizontal: false,
-          columnWidth: '55%',
-          endingShape: 'rounded',
-        },
+      yaxis: {
+        labels: { style: { colors: getCssVar('--chart-label-color') } },
       },
-      dataLabels: {
-        enabled: false,
+      grid: { borderColor: '#444' },
+      tooltip: { theme: 'dark' },
+    });
+
+    const deviationBarSeries = ref([
+      {
+        name: 'Percentage Deviation',
+        data: [5, -2, 8, -4, 10, -1, 6, -3, 7, -5],
       },
+    ]);
+    const deviationBarChartOptions = ref({
+      chart: { type: 'bar', height: 350, toolbar: { show: false } },
+      plotOptions: { bar: { horizontal: false, columnWidth: '55%', endingShape: 'rounded' } },
+      dataLabels: { enabled: false },
       xaxis: {
-        categories: ['Q1', 'Q2', 'Q3', 'Q4', 'Q5', 'Q6'],
-        labels: {
-          style: {
-            colors: getComputedStyle(document.documentElement).getPropertyValue('--chart-label-color'),
-          },
-        },
+        categories: ['Plot 1', 'Plot 2', 'Plot 3', 'Plot 4', 'Plot 5', 'Plot 6', 'Plot 7', 'Plot 8', 'Plot 9', 'Plot 10'],
+        labels: { style: { colors: getCssVar('--chart-label-color') } },
       },
       yaxis: {
-        title: {
-          text: 'Tonnes of Carbon',
-          style: {
-            color: getComputedStyle(document.documentElement).getPropertyValue('--chart-label-color'),
-          },
-        },
-        labels: {
-          style: {
-            colors: getComputedStyle(document.documentElement).getPropertyValue('--chart-label-color'),
-          },
-        },
+        title: { text: 'Deviation (%)' },
+        labels: { style: { colors: getCssVar('--chart-label-color') } },
       },
-      legend: {
-        labels: {
-          colors: getComputedStyle(document.documentElement).getPropertyValue('--color-text-secondary'),
-        },
+      colors: [getCssVar('--color-secondary')],
+      grid: { borderColor: '#444' },
+      tooltip: { theme: 'dark' },
+    });
+
+    // Section 2: Baseline vs. Actual Carbon Sequestered
+    const carbonLineSeries = ref([
+      { name: 'Baseline Carbon', data: [1000, 1100, 1050, 1200, 1150, 1300, 1250, 1400, 1350, 1500, 1450, 1600] },
+      { name: 'Actual Carbon', data: [1050, 1150, 1100, 1250, 1200, 1350, 1300, 1450, 1400, 1550, 1500, 1650] },
+    ]);
+    const carbonLineChartOptions = ref({
+      chart: { type: 'line', height: 350, toolbar: { show: false } },
+      xaxis: {
+        categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
+        labels: { style: { colors: getCssVar('--chart-label-color') } },
       },
-      grid: {
-        borderColor: '#444',
+      yaxis: {
+        title: { text: 'Carbon (tonnes)' },
+        labels: { style: { colors: getCssVar('--chart-label-color') } },
       },
-      tooltip: {
-        theme: 'dark',
+      colors: [getCssVar('--color-secondary'), getCssVar('--color-primary')],
+      grid: { borderColor: '#444' },
+      tooltip: { theme: 'dark' },
+    });
+
+    // Section 3: Dynamic Control Area Generation
+    const characteristicsBarSeries = ref([
+      { name: 'Control Areas', data: [70, 85, 60] },
+      { name: 'Restoration Areas', data: [80, 75, 90] },
+    ]);
+    const characteristicsBarChartOptions = ref({
+      chart: { type: 'bar', height: 350, toolbar: { show: false } },
+      plotOptions: { bar: { horizontal: false, columnWidth: '55%', endingShape: 'rounded' } },
+      dataLabels: { enabled: false },
+      xaxis: {
+        categories: ['Soil Type A', 'Elevation B', 'Land Cover C'],
+        labels: { style: { colors: getCssVar('--chart-label-color') } },
       },
+      yaxis: {
+        title: { text: 'Value' },
+        labels: { style: { colors: getCssVar('--chart-label-color') } },
+      },
+      colors: [getCssVar('--color-secondary'), getCssVar('--color-primary')],
+      grid: { borderColor: '#444' },
+      tooltip: { theme: 'dark' },
     });
 
+    // Section 4: Real-time MRV (Measurement, Reporting & Verification) Eligibility Scoring
     const mrvScoreSeries = ref([88]); // Percentage for radial bar
-
     const mrvScoreChartOptions = ref({
-      chart: {
-        height: 200,
-        type: 'radialBar',
-      },
+      chart: { height: 200, type: 'radialBar' },
       plotOptions: {
         radialBar: {
-          hollow: {
-            size: '70%',
-          },
+          hollow: { size: '70%' },
           dataLabels: {
             showOn: 'always',
-            name: {
-              show: true,
-              fontSize: '16px',
-              fontFamily: 'Roboto, Arial, sans-serif',
-              color: getComputedStyle(document.documentElement).getPropertyValue('--color-text-secondary'),
-              offsetY: -10
-            },
-            value: {
-              show: true,
-              fontSize: '20px',
-              fontFamily: 'Roboto, Arial, sans-serif',
-              color: getComputedStyle(document.documentElement).getPropertyValue('--color-primary'),
-              offsetY: 5,
-              formatter: function (val) {
-                return val + '%';
-              }
-            }
-          }
-        }
+            name: { show: true, fontSize: '16px', fontFamily: 'Roboto, Arial, sans-serif', color: getCssVar('--color-text-secondary'), offsetY: -10 },
+            value: { show: true, fontSize: '20px', fontFamily: 'Roboto, Arial, sans-serif', color: getCssVar('--color-primary'), offsetY: 5, formatter: (val) => val + '%' },
+          },
+        },
       },
+      fill: { colors: [getCssVar('--color-primary')] },
+      stroke: { lineCap: 'round' },
+      labels: ['Eligibility Score'],
+    });
+
+    const mrvTrendSeries = ref([
+      { name: 'Eligibility Score', data: [70, 75, 80, 85, 88, 90, 87, 89, 91, 92, 90, 93] },
+    ]);
+    const mrvTrendChartOptions = ref({
+      chart: { type: 'line', height: 350, toolbar: { show: false } },
+      xaxis: {
+        categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
+        labels: { style: { colors: getCssVar('--chart-label-color') } },
+      },
+      yaxis: {
+        title: { text: 'Score (0-100)' },
+        labels: { style: { colors: getCssVar('--chart-label-color') } },
+      },
+      colors: [getCssVar('--color-primary')],
+      grid: { borderColor: '#444' },
+      tooltip: { theme: 'dark' },
+    });
+
+    const contributingFactorsSeries = ref([
+      {
+        name: 'Score Contribution',
+        data: [80, 75, 90, 85, 95],
+      },
+    ]);
+    const contributingFactorsChartOptions = ref({
+      chart: { type: 'radar', height: 350, toolbar: { show: false } },
+      xaxis: {
+        categories: ['Biomass Growth', 'Weather Impact', 'Reporting Compliance', 'Land Use Change', 'Monitoring Frequency'],
+        labels: { style: { colors: getCssVar('--chart-label-color') } },
+      },
+      yaxis: {
+        labels: { style: { colors: getCssVar('--chart-label-color') } },
+      },
+      colors: [getCssVar('--color-primary')],
+      stroke: { width: 2 },
+      fill: { opacity: 0.5 },
+      markers: { size: 4 },
+      grid: { borderColor: '#444' },
+      tooltip: { theme: 'dark' },
+    });
+
+    // Section 5: Credit Issuance Prediction with Confidence Intervals
+    const predictionLineSeries = ref([
+      { name: 'Predicted Credits', data: [100, 120, 150, 180, 200, 220, 250, 280, 300, 320, 350, 380] },
+      { name: 'Upper Bound', data: [110, 130, 160, 190, 210, 230, 260, 290, 310, 330, 360, 390] },
+      { name: 'Lower Bound', data: [90, 110, 140, 170, 190, 210, 240, 270, 290, 310, 340, 370] },
+    ]);
+    const predictionLineChartOptions = ref({
+      chart: { type: 'line', height: 350, toolbar: { show: false } },
+      xaxis: {
+        categories: ['Month 1', 'Month 2', 'Month 3', 'Month 4', 'Month 5', 'Month 6', 'Month 7', 'Month 8', 'Month 9', 'Month 10', 'Month 11', 'Month 12'],
+        labels: { style: { colors: getCssVar('--chart-label-color') } },
+      },
+      yaxis: {
+        title: { text: 'Carbon Credits' },
+        labels: { style: { colors: getCssVar('--chart-label-color') } },
+      },
+      colors: [getCssVar('--color-primary'), '#FF4560', '#00E396'], // Predicted, Upper, Lower
+      stroke: { curve: 'smooth', width: [3, 1, 1] },
       fill: {
-        colors: [getComputedStyle(document.documentElement).getPropertyValue('--color-primary')]
+        type: 'gradient',
+        gradient: {
+          shadeIntensity: 1,
+          opacityFrom: 0.7,
+          opacityTo: 0.9,
+          stops: [0, 100]
+        }
       },
-      stroke: {
-        lineCap: 'round'
+      grid: { borderColor: '#444' },
+      tooltip: { theme: 'dark' },
+    });
+
+    const historicalComparisonSeries = ref([
+      { name: 'Actual Credits', data: [90, 110, 145, 170, 195] },
+      { name: 'Predicted Credits', data: [100, 120, 150, 180, 200] },
+    ]);
+    const historicalComparisonChartOptions = ref({
+      chart: { type: 'bar', height: 350, toolbar: { show: false } },
+      plotOptions: { bar: { horizontal: false, columnWidth: '55%', endingShape: 'rounded' } },
+      dataLabels: { enabled: false },
+      xaxis: {
+        categories: ['Period 1', 'Period 2', 'Period 3', 'Period 4', 'Period 5'],
+        labels: { style: { colors: getCssVar('--chart-label-color') } },
       },
-      labels: ['Eligibility Score'],
+      yaxis: {
+        title: { text: 'Carbon Credits' },
+        labels: { style: { colors: getCssVar('--chart-label-color') } },
+      },
+      colors: [getCssVar('--color-secondary'), getCssVar('--color-primary')],
+      grid: { borderColor: '#444' },
+      tooltip: { theme: 'dark' },
     });
 
     return {
-      carbonSequesteredSeries,
-      carbonSequesteredChartOptions,
+      lidarScatterSeries,
+      lidarScatterChartOptions,
+      biomassHeatmapSeries,
+      biomassHeatmapChartOptions,
+      deviationBarSeries,
+      deviationBarChartOptions,
+      carbonLineSeries,
+      carbonLineChartOptions,
+      characteristicsBarSeries,
+      characteristicsBarChartOptions,
       mrvScoreSeries,
       mrvScoreChartOptions,
+      mrvTrendSeries,
+      mrvTrendChartOptions,
+      contributingFactorsSeries,
+      contributingFactorsChartOptions,
+      predictionLineSeries,
+      predictionLineChartOptions,
+      historicalComparisonSeries,
+      historicalComparisonChartOptions,
     };
   },
 };
 </script>
 
 <style scoped>
-.tab-content {
+.dashboard-container {
   padding: var(--spacing-lg);
   background-color: var(--card-background-color);
   border-radius: var(--border-radius);
@@ -162,43 +396,92 @@
   color: var(--color-text-primary);
 }
 
-.tab-title {
-  font-size: var(--font-size-heading3);
+.dashboard-title {
+  font-size: var(--font-size-heading2);
   color: var(--color-primary);
   margin-bottom: var(--spacing-xl);
+  text-align: center;
 }
 
-.metrics-grid {
+.dashboard-section {
+  background-color: #2C2C2C;
+  padding: var(--card-padding);
+  border-radius: var(--border-radius);
+  box-shadow: var(--card-shadow);
+  margin-bottom: var(--spacing-xl);
+}
+
+.dashboard-section h3 {
+  font-size: var(--font-size-heading3);
+  color: var(--color-primary);
+  margin-bottom: var(--spacing-lg);
+  border-bottom: 1px solid var(--color-border);
+  padding-bottom: var(--spacing-md);
+}
+
+.kpi-grid {
   display: grid;
-  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
+  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
   gap: var(--spacing-lg);
   margin-bottom: var(--spacing-xl);
 }
 
-.metric-card {
-  background-color: #2C2C2C;
-  padding: var(--card-padding);
+.kpi-card {
+  background-color: var(--background-color-dark);
+  padding: var(--spacing-lg);
   border-radius: var(--border-radius);
-  box-shadow: var(--card-shadow);
   text-align: center;
+  box-shadow: var(--card-shadow);
 }
 
-.metric-card h3 {
+.kpi-value {
+  font-size: var(--font-size-heading1);
+  color: var(--color-accent);
+  font-weight: var(--font-weight-bold);
+  margin-bottom: var(--spacing-sm);
+}
+
+.kpi-label {
+  font-size: var(--font-size-body);
+  color: var(--color-text-secondary);
+}
+
+.chart-grid {
+  display: grid;
+  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
+  gap: var(--spacing-lg);
+}
+
+.chart-card {
+  background-color: var(--background-color-dark);
+  padding: var(--spacing-lg);
+  border-radius: var(--border-radius);
+  box-shadow: var(--card-shadow);
+}
+
+.chart-card h4 {
+  font-size: var(--font-size-body);
   color: var(--color-text-primary);
   margin-bottom: var(--spacing-md);
-  font-size: var(--font-size-body);
-  font-weight: var(--font-weight-medium);
+  text-align: center;
 }
 
-.metric-value {
-  font-size: var(--font-size-heading1);
-  color: var(--color-primary);
-  font-weight: var(--font-weight-bold);
-  margin-bottom: var(--spacing-sm);
+.single-value-card {
+  display: flex;
+  flex-direction: column;
+  justify-content: center;
+  align-items: center;
+  min-height: 200px; /* Ensure it takes up similar space to a chart */
 }
 
-.metric-description {
-  font-size: var(--font-size-small);
+.map-placeholder {
+  background-color: #3a3a3a;
+  height: 300px;
+  display: flex;
+  justify-content: center;
+  align-items: center;
   color: var(--color-text-secondary);
+  border-radius: var(--border-radius);
+  font-style: italic;
 }
 </style>
\ No newline at end of file
diff -ur --ex src/views/dashboard/EcosystemHealthIndexView.vue ../rezen-web/src/views/dashboard/EcosystemHealthIndexView.vue
--- src/views/dashboard/EcosystemHealthIndexView.vue	2025-08-04 20:36:54
+++ ../rezen-web/src/views/dashboard/EcosystemHealthIndexView.vue	2025-08-05 01:52:40
@@ -1,27 +1,94 @@
 <template>
-  <div class="tab-content">
-    <h2 class="tab-title">Ecosystem Health Index</h2>
+  <div class="ecosystem-health-dashboard">
+    <h2 class="dashboard-title">Ecosystem Health Index</h2>
 
-    <div class="metrics-grid">
-      <div class="metric-card">
-        <h3>Soil Organic Carbon %</h3>
-        <apexchart type="line" :options="socChartOptions" :series="socSeries"></apexchart>
+    <div class="dashboard-grid">
+      <!-- Section 1: Water Table Levels & Recharge Rates -->
+      <div class="section-card">
+        <h3>Water Table Levels & Recharge Rates</h3>
+        <div class="kpis">
+          <div class="kpi-item">
+            <span class="kpi-value">{{ currentWaterTableLevel }} m</span>
+            <span class="kpi-label">Current Water Table Level</span>
+          </div>
+          <div class="kpi-item">
+            <span class="kpi-value">{{ monthlyRechargeRate }} mm/month</span>
+            <span class="kpi-label">Monthly Recharge Rate</span>
+          </div>
+        </div>
+        <div class="chart-container">
+          <apexchart type="line" :options="waterTableLevelChartOptions" :series="waterTableLevelSeries"></apexchart>
+          <apexchart type="bar" :options="monthlyRechargeRateChartOptions" :series="monthlyRechargeRateSeries"></apexchart>
+        </div>
+        <div class="value-card">
+          <span class="value-label">Current vs. Historical Average:</span>
+          <span class="value-data">{{ waterTableComparison }}</span>
+        </div>
       </div>
 
-      <div class="metric-card">
-        <h3>Water Table Levels</h3>
-        <apexchart type="radialBar" :options="waterTableChartOptions" :series="waterTableSeries"></apexchart>
+      <!-- Section 2: Pollinator Counts, Bird Census, Faunal Activity -->
+      <div class="section-card">
+        <h3>Pollinator Counts, Bird Census, Faunal Activity</h3>
+        <div class="kpis">
+          <div class="kpi-item">
+            <span class="kpi-value">{{ totalPollinatorSightings }}</span>
+            <span class="kpi-label">Total Pollinator Sightings</span>
+          </div>
+          <div class="kpi-item">
+            <span class="kpi-value">{{ totalBirdCount }}</span>
+            <span class="kpi-label">Total Bird Count</span>
+          </div>
+          <div class="kpi-item">
+            <span class="kpi-value">{{ numberOfUniqueSpecies }}</span>
+            <span class="kpi-label">Unique Species</span>
+          </div>
+        </div>
+        <div class="chart-container">
+          <apexchart type="bar" :options="speciesBreakdownChartOptions" :series="speciesBreakdownSeries"></apexchart>
+          <apexchart type="line" :options="keySpeciesTrendChartOptions" :series="keySpeciesTrendSeries"></apexchart>
+        </div>
+        <div class="value-card">
+          <span class="value-label">Biodiversity Score:</span>
+          <span class="value-data">{{ biodiversityScore }}</span>
+        </div>
       </div>
 
-      <div class="metric-card">
-        <h3>Pollinator Counts</h3>
-        <p class="metric-value">150+</p>
-        <p class="metric-description">Bird Census: <span>75+ species</span></p>
+      <!-- Section 3: Microclimate Shifts Across Zones -->
+      <div class="section-card">
+        <h3>Microclimate Shifts Across Zones</h3>
+        <div class="kpis">
+          <div class="kpi-item">
+            <span class="kpi-value">{{ currentAverageTemperature }} °C</span>
+            <span class="kpi-label">Avg. Temperature</span>
+          </div>
+          <div class="kpi-item">
+            <span class="kpi-value">{{ currentAverageHumidity }} %</span>
+            <span class="kpi-label">Avg. Humidity</span>
+          </div>
+        </div>
+        <div class="chart-container">
+          <apexchart type="radar" :options="microclimateRadarChartOptions" :series="microclimateRadarSeries"></apexchart>
+          <apexchart type="line" :options="temperatureTrendChartOptions" :series="temperatureTrendSeries"></apexchart>
+        </div>
       </div>
 
-      <div class="metric-card">
-        <h3>Microclimate Shifts</h3>
-        <p class="metric-description">Monitoring ongoing across zones.</p>
+      <!-- Section 4: Soil Organic Carbon % -->
+      <div class="section-card">
+        <h3>Soil Organic Carbon %</h3>
+        <div class="kpis">
+          <div class="kpi-item">
+            <span class="kpi-value">{{ latestSoilOrganicCarbon }} %</span>
+            <span class="kpi-label">Latest SOC %</span>
+          </div>
+          <div class="kpi-item">
+            <span class="kpi-value">{{ yearOverYearChange }} %</span>
+            <span class="kpi-label">Year-over-Year Change</span>
+          </div>
+        </div>
+        <div class="chart-container">
+          <apexchart type="line" :options="socTrendChartOptions" :series="socTrendSeries"></apexchart>
+          <apexchart type="bar" :options="plotComparisonChartOptions" :series="plotComparisonSeries"></apexchart>
+        </div>
       </div>
     </div>
   </div>
@@ -33,109 +100,216 @@
 export default {
   name: 'EcosystemHealthIndexView',
   setup() {
-    const socSeries = ref([
+    // Section 1: Water Table Levels & Recharge Rates
+    const currentWaterTableLevel = ref(15.2); // meters below surface
+    const monthlyRechargeRate = ref(75); // mm/month
+    const waterTableComparison = ref('-2.5m vs Avg'); // Example comparison
+
+    const waterTableLevelSeries = ref([
       {
-        name: 'Soil Organic Carbon (%)',
-        data: [1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3],
+        name: 'Water Table Level (m)',
+        data: [18.5, 17.9, 17.2, 16.8, 16.5, 16.0, 15.8, 15.5, 15.2, 15.0, 14.8, 14.5, 14.2, 14.0, 13.8, 13.5, 13.2, 13.0, 12.8, 12.5, 12.2, 12.0, 11.8, 11.5],
       },
     ]);
+    const waterTableLevelChartOptions = ref({
+      chart: { height: 250, type: 'line', toolbar: { show: false } },
+      colors: ['#007bff'],
+      stroke: { curve: 'smooth' },
+      xaxis: { categories: Array.from({length: 24}, (_, i) => `Month ${i + 1}`), labels: { style: { colors: '#ccc' } } },
+      yaxis: { title: { text: 'Level (m)' }, labels: { style: { colors: '#ccc' } } },
+      grid: { borderColor: '#444' },
+      tooltip: { theme: 'dark' },
+    });
 
-    const socChartOptions = ref({
-      chart: {
-        height: 250,
-        type: 'line',
-        toolbar: {
-          show: false,
-        },
+    const monthlyRechargeRateSeries = ref([
+      {
+        name: 'Monthly Recharge Rate (mm)',
+        data: [60, 70, 80, 75, 65, 90, 85, 70, 75, 80, 95, 100],
       },
-      colors: [getComputedStyle(document.documentElement).getPropertyValue('--color-primary')],
-      stroke: {
-        curve: 'smooth',
+    ]);
+    const monthlyRechargeRateChartOptions = ref({
+      chart: { height: 250, type: 'bar', toolbar: { show: false } },
+      colors: ['#28a745'],
+      plotOptions: { bar: { horizontal: false, columnWidth: '55%', endingShape: 'rounded' } },
+      dataLabels: { enabled: false },
+      stroke: { show: true, width: 2, colors: ['transparent'] },
+      xaxis: { categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'], labels: { style: { colors: '#ccc' } } },
+      yaxis: { title: { text: 'Recharge (mm)' }, labels: { style: { colors: '#ccc' } } },
+      grid: { borderColor: '#444' },
+      tooltip: { theme: 'dark' },
+    });
+
+    // Section 2: Pollinator Counts, Bird Census, Faunal Activity
+    const totalPollinatorSightings = ref(1250);
+    const totalBirdCount = ref(320);
+    const numberOfUniqueSpecies = ref(85);
+    const biodiversityScore = ref(7.8); // Example score
+
+    const speciesBreakdownSeries = ref([
+      {
+        name: 'Birds',
+        data: [120, 130, 140, 150, 160, 170],
       },
-      xaxis: {
-        categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
-        labels: {
-          style: {
-            colors: getComputedStyle(document.documentElement).getPropertyValue('--chart-label-color'),
-          },
-        },
+      {
+        name: 'Insects',
+        data: [300, 350, 400, 450, 500, 550],
       },
-      yaxis: {
-        title: {
-          text: 'SOC (%)',
-          style: {
-            color: getComputedStyle(document.documentElement).getPropertyValue('--chart-label-color'),
-          },
-        },
-        labels: {
-          style: {
-            colors: getComputedStyle(document.documentElement).getPropertyValue('--chart-label-color'),
-          },
-        },
+      {
+        name: 'Mammals',
+        data: [30, 35, 40, 45, 50, 55],
       },
-      grid: {
-        borderColor: '#444',
+    ]);
+    const speciesBreakdownChartOptions = ref({
+      chart: { height: 250, type: 'bar', stacked: true, toolbar: { show: false } },
+      colors: ['#fd7e14', '#ffc107', '#17a2b8'],
+      plotOptions: { bar: { horizontal: false } },
+      xaxis: { categories: ['Q1', 'Q2', 'Q3', 'Q4', 'Q5', 'Q6'], labels: { style: { colors: '#ccc' } } },
+      yaxis: { title: { text: 'Count' }, labels: { style: { colors: '#ccc' } } },
+      grid: { borderColor: '#444' },
+      tooltip: { theme: 'dark' },
+    });
+
+    const keySpeciesTrendSeries = ref([
+      {
+        name: 'Bee Count (per sq km)',
+        data: [50, 55, 60, 58, 62, 65, 63, 68, 70, 67, 72, 75],
       },
-      tooltip: {
-        theme: 'dark',
-      },
+    ]);
+    const keySpeciesTrendChartOptions = ref({
+      chart: { height: 250, type: 'line', toolbar: { show: false } },
+      colors: ['#6f42c1'],
+      stroke: { curve: 'smooth' },
+      xaxis: { categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'], labels: { style: { colors: '#ccc' } } },
+      yaxis: { title: { text: 'Count' }, labels: { style: { colors: '#ccc' } } },
+      grid: { borderColor: '#444' },
+      tooltip: { theme: 'dark' },
     });
 
-    const waterTableSeries = ref([65]); // Percentage for radial bar
+    // Section 3: Microclimate Shifts Across Zones
+    const currentAverageTemperature = ref(25.5);
+    const currentAverageHumidity = ref(68.2);
 
-    const waterTableChartOptions = ref({
-      chart: {
-        height: 200,
-        type: 'radialBar',
+    const microclimateRadarSeries = ref([
+      {
+        name: 'Zone A',
+        data: [25, 70, 15],
       },
-      plotOptions: {
-        radialBar: {
-          hollow: {
-            size: '70%',
-          },
-          dataLabels: {
-            showOn: 'always',
-            name: {
-              show: true,
-              fontSize: '16px',
-              fontFamily: 'Roboto, Arial, sans-serif',
-              color: getComputedStyle(document.documentElement).getPropertyValue('--color-text-secondary'),
-              offsetY: -10
-            },
-            value: {
-              show: true,
-              fontSize: '20px',
-              fontFamily: 'Roboto, Arial, sans-serif',
-              color: getComputedStyle(document.documentElement).getPropertyValue('--color-primary'),
-              offsetY: 5,
-              formatter: function (val) {
-                return val + '%';
-              }
-            }
-          }
-        }
+      {
+        name: 'Zone B',
+        data: [28, 65, 12],
       },
-      fill: {
-        colors: [getComputedStyle(document.documentElement).getPropertyValue('--color-primary')]
+      {
+        name: 'Zone C',
+        data: [22, 75, 18],
       },
-      stroke: {
-        lineCap: 'round'
+    ]);
+    const microclimateRadarChartOptions = ref({
+      chart: { height: 300, type: 'radar', toolbar: { show: false } },
+      colors: ['#dc3545', '#ffc107', '#007bff'],
+      xaxis: { categories: ['Avg Temp (°C)', 'Humidity (%)', 'Wind Speed (km/h)'], labels: { style: { colors: ['#ccc', '#ccc', '#ccc'] } } },
+      yaxis: { show: false },
+      plotOptions: { radar: { polygons: { strokeColors: '#444', fill: { colors: ['#333', '#222'] } } } },
+      tooltip: { theme: 'dark' },
+    });
+
+    const temperatureTrendSeries = ref([
+      {
+        name: 'Zone A',
+        data: [24, 25, 26, 25, 24, 23, 22, 23, 24, 25, 26, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15],
       },
-      labels: ['Water Level'],
+      {
+        name: 'Zone B',
+        data: [26, 27, 28, 27, 26, 25, 24, 25, 26, 27, 28, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17],
+      },
+      {
+        name: 'Zone C',
+        data: [22, 23, 24, 23, 22, 21, 20, 21, 22, 23, 24, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13],
+      },
+    ]);
+    const temperatureTrendChartOptions = ref({
+      chart: { height: 250, type: 'line', toolbar: { show: false } },
+      colors: ['#dc3545', '#ffc107', '#007bff'],
+      stroke: { curve: 'smooth' },
+      xaxis: { categories: Array.from({length: 24}, (_, i) => `${i}:00`), labels: { style: { colors: '#ccc' } } },
+      yaxis: { title: { text: 'Temperature (°C)' }, labels: { style: { colors: '#ccc' } } },
+      grid: { borderColor: '#444' },
+      tooltip: { theme: 'dark' },
     });
 
+    // Section 4: Soil Organic Carbon %
+    const latestSoilOrganicCarbon = ref(2.8);
+    const yearOverYearChange = ref(0.3); // Percentage point change
+
+    const socTrendSeries = ref([
+      {
+        name: 'Soil Organic Carbon (%)',
+        data: [1.5, 1.7, 1.9, 2.1, 2.3, 2.5, 2.6, 2.7, 2.8],
+      },
+    ]);
+    const socTrendChartOptions = ref({
+      chart: { height: 250, type: 'line', toolbar: { show: false } },
+      colors: ['#6610f2'],
+      stroke: { curve: 'smooth' },
+      xaxis: { categories: ['Year 1', 'Year 2', 'Year 3', 'Year 4', 'Year 5', 'Year 6', 'Year 7', 'Year 8', 'Year 9'], labels: { style: { colors: '#ccc' } } },
+      yaxis: { title: { text: 'SOC (%)' }, labels: { style: { colors: '#ccc' } } },
+      grid: { borderColor: '#444' },
+      tooltip: { theme: 'dark' },
+    });
+
+    const plotComparisonSeries = ref([
+      {
+        name: 'Soil Organic Carbon (%)',
+        data: [2.5, 2.8, 2.3, 2.9, 2.7],
+      },
+    ]);
+    const plotComparisonChartOptions = ref({
+      chart: { height: 250, type: 'bar', toolbar: { show: false } },
+      colors: ['#20c997'],
+      plotOptions: { bar: { horizontal: false, columnWidth: '55%', endingShape: 'rounded' } },
+      dataLabels: { enabled: false },
+      stroke: { show: true, width: 2, colors: ['transparent'] },
+      xaxis: { categories: ['Plot A', 'Plot B', 'Plot C', 'Plot D', 'Plot E'], labels: { style: { colors: '#ccc' } } },
+      yaxis: { title: { text: 'SOC (%)' }, labels: { style: { colors: '#ccc' } } },
+      grid: { borderColor: '#444' },
+      tooltip: { theme: 'dark' },
+    });
+
+
     return {
-      socSeries,
-      socChartOptions,
-      waterTableSeries,
-      waterTableChartOptions,
+      currentWaterTableLevel,
+      monthlyRechargeRate,
+      waterTableComparison,
+      waterTableLevelSeries,
+      waterTableLevelChartOptions,
+      monthlyRechargeRateSeries,
+      currentAverageTemperature,
+      currentAverageHumidity,
+      monthlyRechargeRateChartOptions,
+      totalPollinatorSightings,
+      totalBirdCount,
+      numberOfUniqueSpecies,
+      biodiversityScore,
+      speciesBreakdownSeries,
+      speciesBreakdownChartOptions,
+      keySpeciesTrendSeries,
+      keySpeciesTrendChartOptions,
+      microclimateRadarSeries,
+      microclimateRadarChartOptions,
+      temperatureTrendSeries,
+      temperatureTrendChartOptions,
+      latestSoilOrganicCarbon,
+      yearOverYearChange,
+      socTrendSeries,
+      socTrendChartOptions,
+      plotComparisonSeries,
+      plotComparisonChartOptions,
     };
   },
 };
 </script>
 
 <style scoped>
-.tab-content {
+.ecosystem-health-dashboard {
   padding: var(--spacing-lg);
   background-color: var(--card-background-color);
   border-radius: var(--border-radius);
@@ -143,43 +317,93 @@
   color: var(--color-text-primary);
 }
 
-.tab-title {
+.dashboard-title {
   font-size: var(--font-size-heading3);
   color: var(--color-primary);
   margin-bottom: var(--spacing-xl);
+  text-align: center;
 }
 
-.metrics-grid {
+.dashboard-grid {
   display: grid;
-  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
+  grid-template-columns: repeat(auto-fit, minmax(450px, 1fr));
   gap: var(--spacing-lg);
-  margin-bottom: var(--spacing-xl);
 }
 
-.metric-card {
+.section-card {
   background-color: #2C2C2C;
   padding: var(--card-padding);
   border-radius: var(--border-radius);
   box-shadow: var(--card-shadow);
-  text-align: center;
+  display: flex;
+  flex-direction: column;
+  gap: var(--spacing-md);
 }
 
-.metric-card h3 {
-  color: var(--color-text-primary);
-  margin-bottom: var(--spacing-md);
+.section-card h3 {
+  color: var(--color-primary);
   font-size: var(--font-size-body);
   font-weight: var(--font-weight-medium);
+  margin-bottom: var(--spacing-sm);
+  text-align: center;
 }
 
-.metric-value {
-  font-size: var(--font-size-heading1);
-  color: var(--color-primary);
+.kpis {
+  display: flex;
+  justify-content: space-around;
+  margin-bottom: var(--spacing-md);
+  flex-wrap: wrap;
+}
+
+.kpi-item {
+  text-align: center;
+  margin: var(--spacing-sm);
+}
+
+.kpi-value {
+  font-size: var(--font-size-heading2);
+  color: var(--color-accent);
   font-weight: var(--font-weight-bold);
-  margin-bottom: var(--spacing-sm);
+  display: block;
 }
 
-.metric-description {
+.kpi-label {
   font-size: var(--font-size-small);
   color: var(--color-text-secondary);
+}
+
+.chart-container {
+  display: grid;
+  grid-template-columns: 1fr;
+  gap: var(--spacing-md);
+  margin-bottom: var(--spacing-md);
+}
+
+@media (min-width: 768px) {
+  .chart-container {
+    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
+  }
+}
+
+.value-card {
+  background-color: #3a3a3a;
+  padding: var(--spacing-md);
+  border-radius: var(--border-radius);
+  text-align: center;
+  display: flex;
+  justify-content: center;
+  align-items: center;
+  gap: var(--spacing-sm);
+}
+
+.value-label {
+  font-size: var(--font-size-body);
+  color: var(--color-text-primary);
+}
+
+.value-data {
+  font-size: var(--font-size-body);
+  color: var(--color-accent);
+  font-weight: var(--font-weight-bold);
 }
 </style>
\ No newline at end of file
diff -ur --ex src/views/dashboard/ProjectPortfolioDashboardView.vue ../rezen-web/src/views/dashboard/ProjectPortfolioDashboardView.vue
--- src/views/dashboard/ProjectPortfolioDashboardView.vue	2025-08-04 20:35:38
+++ ../rezen-web/src/views/dashboard/ProjectPortfolioDashboardView.vue	2025-08-05 01:06:53
@@ -1,29 +1,66 @@
 <template>
-  <div class="tab-content">
-    <h2 class="tab-title">Project Portfolio Dashboard</h2>
+  <div class="dashboard-container">
+    <h2 class="dashboard-title">Project Portfolio Dashboard</h2>
 
-    <div class="metrics-grid">
-      <div class="metric-card">
+    <div class="dashboard-grid">
+      <!-- Section 1: Total Area Under Restoration -->
+      <div class="dashboard-section">
         <h3>Total Area Under Restoration</h3>
-        <p class="metric-value">12,345 Hectares</p>
-        <apexchart type="radialBar" :options="areaChartOptions" :series="areaSeries"></apexchart>
+        <div class="kpi-container">
+          <p class="kpi-value">15,000 Hectares</p>
+        </div>
+        <div class="chart-container">
+          <apexchart type="area" :options="areaRestorationChartOptions" :series="areaRestorationSeries"></apexchart>
+        </div>
+        <div class="chart-container">
+          <apexchart type="donut" :options="restorationTypeChartOptions" :series="restorationTypeSeries"></apexchart>
+        </div>
       </div>
 
-      <div class="metric-card">
-        <h3>Verified vs Expected Carbon Credits</h3>
-        <apexchart type="bar" :options="carbonCreditsChartOptions" :series="carbonCreditsSeries"></apexchart>
+      <!-- Section 2: Verified vs. Expected Carbon Credits -->
+      <div class="dashboard-section">
+        <h3>Verified vs. Expected Carbon Credits</h3>
+        <div class="kpi-container">
+          <p class="kpi-value">Expected: <span>100,000</span></p>
+          <p class="kpi-value">Verified: <span>85,000</span></p>
+          <p class="kpi-value">Rate: <span>85%</span></p>
+        </div>
+        <div class="chart-container">
+          <apexchart type="line" :options="carbonCreditsLineChartOptions" :series="carbonCreditsLineSeries"></apexchart>
+        </div>
+        <div class="chart-container">
+          <apexchart type="bar" :options="verifiedUnverifiedChartOptions" :series="verifiedUnverifiedSeries"></apexchart>
+        </div>
       </div>
 
-      <div class="metric-card">
+      <!-- Section 3: Biodiversity Indices -->
+      <div class="dashboard-section">
         <h3>Biodiversity Indices</h3>
-        <p class="metric-value">Species Count: <span>450+</span></p>
-        <p class="metric-value">Camera Trap Sightings: <span>1,200+</span></p>
+        <div class="kpi-container">
+          <p class="kpi-value">Total Species Count: <span>450</span></p>
+          <p class="kpi-value">Camera Trap Sightings: <span>1,200</span></p>
+        </div>
+        <div class="chart-container">
+          <apexchart type="line" :options="cameraTrapChartOptions" :series="cameraTrapSeries"></apexchart>
+        </div>
+        <div class="chart-container">
+          <apexchart type="bar" :options="topSpeciesChartOptions" :series="topSpeciesSeries"></apexchart>
+        </div>
+        <div class="chart-container">
+          <apexchart type="radialBar" :options="biodiversityScoreChartOptions" :series="biodiversityScoreSeries"></apexchart>
+        </div>
       </div>
 
-      <div class="metric-card">
-        <h3>Cumulative Rainfall</h3>
-        <p class="metric-value">1,500 mm</p>
-        <p class="metric-description">Extreme Weather Events Tracked: <span>3</span></p>
+      <!-- Section 4: Cumulative Rainfall and Extreme Weather Events Tracked -->
+      <div class="dashboard-section">
+        <h3>Cumulative Rainfall and Extreme Weather Events Tracked</h3>
+        <div class="kpi-container">
+          <p class="kpi-value">Rainfall (12 Months): <span>1,500 mm</span></p>
+          <p class="kpi-value">Extreme Events (12 Months): <span>3</span></p>
+        </div>
+        <div class="chart-container">
+          <apexchart type="bar" :options="rainfallChartOptions" :series="rainfallSeries"></apexchart>
+        </div>
       </div>
     </div>
   </div>
@@ -31,133 +68,271 @@
 
 <script>
 import { ref } from 'vue';
+import ApexCharts from 'apexcharts'; // Import ApexCharts
 
 export default {
   name: 'ProjectPortfolioDashboardView',
+  components: {
+    apexchart: ApexCharts, // Register ApexCharts component
+  },
   setup() {
-    const areaSeries = ref([75]); // Percentage for radial bar
-
-    const areaChartOptions = ref({
+    // Mock Data for Section 1: Total Area Under Restoration
+    const areaRestorationSeries = ref([{
+      name: 'Restored Area',
+      data: [1000, 1500, 2000, 2500, 3000, 4000, 5000, 7000, 9000, 11000, 13000, 15000]
+    }]);
+    const areaRestorationChartOptions = ref({
       chart: {
+        type: 'area',
         height: 200,
-        type: 'radialBar',
+        toolbar: { show: false },
       },
-      plotOptions: {
-        radialBar: {
-          hollow: {
-            size: '70%',
-          },
-          dataLabels: {
-            showOn: 'always',
-            name: {
-              show: true,
-              fontSize: '16px',
-              fontFamily: 'Roboto, Arial, sans-serif',
-              color: getComputedStyle(document.documentElement).getPropertyValue('--color-text-secondary'),
-              offsetY: -10
-            },
-            value: {
-              show: true,
-              fontSize: '20px',
-              fontFamily: 'Roboto, Arial, sans-serif',
-              color: getComputedStyle(document.documentElement).getPropertyValue('--color-primary'),
-              offsetY: 5,
-              formatter: function (val) {
-                return val + '%';
-              }
-            }
-          }
-        }
+      xaxis: {
+        categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
+        labels: { style: { colors: getComputedStyle(document.documentElement).getPropertyValue('--chart-label-color') } },
       },
-      fill: {
-        colors: [getComputedStyle(document.documentElement).getPropertyValue('--color-primary')]
+      yaxis: {
+        labels: { style: { colors: getComputedStyle(document.documentElement).getPropertyValue('--chart-label-color') } },
       },
-      stroke: {
-        lineCap: 'round'
+      dataLabels: { enabled: false },
+      stroke: { curve: 'smooth' },
+      colors: [getComputedStyle(document.documentElement).getPropertyValue('--color-primary')],
+      tooltip: { theme: 'dark' },
+      grid: { borderColor: '#444' },
+    });
+
+    const restorationTypeSeries = ref([44, 55, 13]);
+    const restorationTypeChartOptions = ref({
+      chart: {
+        type: 'donut',
+        height: 200,
       },
-      labels: ['Restoration Progress'],
+      labels: ['Regenerative Agriculture', 'Forest Regeneration', 'Wetland Restoration'],
+      colors: [
+        getComputedStyle(document.documentElement).getPropertyValue('--color-primary'),
+        getComputedStyle(document.documentElement).getPropertyValue('--color-secondary'),
+        getComputedStyle(document.documentElement).getPropertyValue('--color-accent'),
+      ],
+      legend: {
+        labels: { colors: getComputedStyle(document.documentElement).getPropertyValue('--color-text-secondary') },
+      },
+      dataLabels: { enabled: true },
+      tooltip: { theme: 'dark' },
     });
 
-    const carbonCreditsSeries = ref([
+    // Mock Data for Section 2: Verified vs. Expected Carbon Credits
+    const carbonCreditsLineSeries = ref([
       {
+        name: 'Expected Credits',
+        data: [5000, 6000, 7000, 8000, 9000, 10000, 11000, 12000, 13000, 14000, 15000, 16000, 17000, 18000, 19000, 20000, 21000, 22000, 23000, 24000, 25000, 26000, 27000, 28000]
+      },
+      {
         name: 'Verified Credits',
-        data: [44, 55, 41, 67, 22, 43],
+        data: [4500, 5500, 6500, 7500, 8500, 9500, 10500, 11500, 12500, 13500, 14500, 15500, 16500, 17500, 18500, 19500, 20500, 21500, 22500, 23500, 24500, 25500, 26500, 27500]
+      }
+    ]);
+    const carbonCreditsLineChartOptions = ref({
+      chart: {
+        height: 200,
+        type: 'line',
+        toolbar: { show: false },
       },
+      xaxis: {
+        categories: Array.from({ length: 24 }, (_, i) => `Month ${i + 1}`),
+        labels: { style: { colors: getComputedStyle(document.documentElement).getPropertyValue('--chart-label-color') } },
+      },
+      yaxis: {
+        labels: { style: { colors: getComputedStyle(document.documentElement).getPropertyValue('--chart-label-color') } },
+      },
+      colors: [
+        getComputedStyle(document.documentElement).getPropertyValue('--color-secondary'),
+        getComputedStyle(document.documentElement).getPropertyValue('--color-primary')
+      ],
+      tooltip: { theme: 'dark' },
+      grid: { borderColor: '#444' },
+    });
+
+    const verifiedUnverifiedSeries = ref([
       {
-        name: 'Expected Credits',
-        data: [53, 32, 33, 52, 13, 44],
+        name: 'Verified',
+        data: [70, 80, 65, 90, 75]
       },
+      {
+        name: 'Unverified',
+        data: [30, 20, 35, 10, 25]
+      }
     ]);
-
-    const carbonCreditsChartOptions = ref({
+    const verifiedUnverifiedChartOptions = ref({
       chart: {
         type: 'bar',
-        height: 250,
+        height: 200,
         stacked: true,
-        toolbar: {
-          show: false,
-        },
+        toolbar: { show: false },
       },
+      xaxis: {
+        categories: ['Project A', 'Project B', 'Project C', 'Project D', 'Project E'],
+        labels: { style: { colors: getComputedStyle(document.documentElement).getPropertyValue('--chart-label-color') } },
+      },
+      yaxis: {
+        labels: { style: { colors: getComputedStyle(document.documentElement).getPropertyValue('--chart-label-color') } },
+      },
       colors: [
         getComputedStyle(document.documentElement).getPropertyValue('--color-primary'),
         getComputedStyle(document.documentElement).getPropertyValue('--color-secondary')
       ],
-      plotOptions: {
-        bar: {
-          horizontal: false,
-          borderRadius: 5,
-          dataLabels: {
-            total: {
-              enabled: true,
-              style: {
-                fontSize: '13px',
-                fontWeight: 900,
-                color: getComputedStyle(document.documentElement).getPropertyValue('--color-text-primary'),
-              }
-            }
-          }
-        },
+      legend: {
+        labels: { colors: getComputedStyle(document.documentElement).getPropertyValue('--color-text-secondary') },
       },
+      tooltip: { theme: 'dark' },
+      grid: { borderColor: '#444' },
+    });
+
+    // Mock Data for Section 3: Biodiversity Indices
+    const cameraTrapSeries = ref([{
+      name: 'Sightings',
+      data: [50, 60, 70, 80, 75, 90, 100, 110, 105, 120, 115, 130]
+    }]);
+    const cameraTrapChartOptions = ref({
+      chart: {
+        type: 'line',
+        height: 200,
+        toolbar: { show: false },
+      },
       xaxis: {
-        categories: ['Q1', 'Q2', 'Q3', 'Q4', 'Q5', 'Q6'],
-        labels: {
-          style: {
-            colors: getComputedStyle(document.documentElement).getPropertyValue('--chart-label-color'),
-          },
-        },
+        categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
+        labels: { style: { colors: getComputedStyle(document.documentElement).getPropertyValue('--chart-label-color') } },
       },
       yaxis: {
-        labels: {
-          style: {
-            colors: getComputedStyle(document.documentElement).getPropertyValue('--chart-label-color'),
-          },
-        },
+        labels: { style: { colors: getComputedStyle(document.documentElement).getPropertyValue('--chart-label-color') } },
       },
-      legend: {
-        labels: {
-          colors: getComputedStyle(document.documentElement).getPropertyValue('--color-text-secondary'),
-        },
+      colors: [getComputedStyle(document.documentElement).getPropertyValue('--color-primary')],
+      tooltip: { theme: 'dark' },
+      grid: { borderColor: '#444' },
+    });
+
+    const topSpeciesSeries = ref([{
+      name: 'Sightings',
+      data: [150, 120, 100, 90, 80, 70, 60, 50, 40, 30]
+    }]);
+    const topSpeciesChartOptions = ref({
+      chart: {
+        type: 'bar',
+        height: 200,
+        toolbar: { show: false },
       },
-      grid: {
-        borderColor: '#444',
+      xaxis: {
+        categories: ['Deer', 'Wild Boar', 'Fox', 'Rabbit', 'Owl', 'Hawk', 'Snake', 'Lizard', 'Frog', 'Squirrel'],
+        labels: { style: { colors: getComputedStyle(document.documentElement).getPropertyValue('--chart-label-color') } },
       },
-      tooltip: {
-        theme: 'dark',
+      yaxis: {
+        labels: { style: { colors: getComputedStyle(document.documentElement).getPropertyValue('--chart-label-color') } },
       },
+      colors: [getComputedStyle(document.documentElement).getPropertyValue('--color-accent')],
+      tooltip: { theme: 'dark' },
+      grid: { borderColor: '#444' },
     });
 
+    const biodiversityScoreSeries = ref([75]);
+    const biodiversityScoreChartOptions = ref({
+      chart: {
+        height: 200,
+        type: 'radialBar',
+      },
+      plotOptions: {
+        radialBar: {
+          hollow: { size: '70%' },
+          dataLabels: {
+            showOn: 'always',
+            name: { show: true, fontSize: '16px', color: getComputedStyle(document.documentElement).getPropertyValue('--color-text-secondary'), offsetY: -10 },
+            value: { show: true, fontSize: '20px', color: getComputedStyle(document.documentElement).getPropertyValue('--color-primary'), offsetY: 5, formatter: function (val) { return val + '%'; } }
+          }
+        }
+      },
+      fill: { colors: [getComputedStyle(document.documentElement).getPropertyValue('--color-primary')] },
+      stroke: { lineCap: 'round' },
+      labels: ['Biodiversity Health Score'],
+      tooltip: { theme: 'dark' },
+    });
+
+    // Mock Data for Section 4: Cumulative Rainfall and Extreme Weather Events Tracked
+    const rainfallSeries = ref([
+      {
+        name: 'Monthly Rainfall',
+        type: 'bar',
+        data: [100, 120, 150, 130, 160, 180, 200, 190, 170, 140, 110, 90]
+      },
+      {
+        name: 'Cumulative Rainfall',
+        type: 'line',
+        data: [100, 220, 370, 500, 660, 840, 1040, 1230, 1400, 1540, 1650, 1740]
+      }
+    ]);
+    const rainfallChartOptions = ref({
+      chart: {
+        height: 200,
+        type: 'line',
+        stacked: false,
+        toolbar: { show: false },
+      },
+      xaxis: {
+        categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
+        labels: { style: { colors: getComputedStyle(document.documentElement).getPropertyValue('--chart-label-color') } },
+      },
+      yaxis: [
+        {
+          axisTicks: { show: true },
+          axisBorder: { show: true, color: getComputedStyle(document.documentElement).getPropertyValue('--color-primary') },
+          labels: { style: { colors: getComputedStyle(document.documentElement).getPropertyValue('--color-primary') } },
+          title: { text: 'Rainfall (mm)', style: { color: getComputedStyle(document.documentElement).getPropertyValue('--color-primary') } },
+          tooltip: { enabled: true }
+        },
+        {
+          axisTicks: { show: true },
+          axisBorder: { show: true, color: getComputedStyle(document.documentElement).getPropertyValue('--color-secondary') },
+          labels: { style: { colors: getComputedStyle(document.documentElement).getPropertyValue('--color-secondary') } },
+          title: { text: 'Cumulative Rainfall (mm)', style: { color: getComputedStyle(document.documentElement).getPropertyValue('--color-secondary') } },
+          opposite: true
+        }
+      ],
+      annotations: {
+        points: [
+          { x: 'Mar', y: 150, marker: { size: 6, fillColor: '#FF4560', strokeColor: '#FF4560' }, label: { borderColor: '#FF4560', offsetY: 0, style: { color: '#fff', background: '#FF4560' }, text: 'Storm' } },
+          { x: 'Jul', y: 200, marker: { size: 6, fillColor: '#00E396', strokeColor: '#00E396' }, label: { borderColor: '#00E396', offsetY: 0, style: { color: '#fff', background: '#00E396' }, text: 'Flood' } },
+          { x: 'Sep', y: 170, marker: { size: 6, fillColor: '#FEB019', strokeColor: '#FEB019' }, label: { borderColor: '#FEB019', offsetY: 0, style: { color: '#fff', background: '#FEB019' }, text: 'Drought' } }
+        ]
+      },
+      colors: [
+        getComputedStyle(document.documentElement).getPropertyValue('--color-primary'),
+        getComputedStyle(document.documentElement).getPropertyValue('--color-secondary')
+      ],
+      tooltip: { theme: 'dark' },
+      grid: { borderColor: '#444' },
+    });
+
     return {
-      areaSeries,
-      areaChartOptions,
-      carbonCreditsSeries,
-      carbonCreditsChartOptions,
+      areaRestorationSeries,
+      areaRestorationChartOptions,
+      restorationTypeSeries,
+      restorationTypeChartOptions,
+      carbonCreditsLineSeries,
+      carbonCreditsLineChartOptions,
+      verifiedUnverifiedSeries,
+      verifiedUnverifiedChartOptions,
+      cameraTrapSeries,
+      cameraTrapChartOptions,
+      topSpeciesSeries,
+      topSpeciesChartOptions,
+      biodiversityScoreSeries,
+      biodiversityScoreChartOptions,
+      rainfallSeries,
+      rainfallChartOptions,
     };
   },
 };
 </script>
 
 <style scoped>
-.tab-content {
+.dashboard-container {
   padding: var(--spacing-lg);
   background-color: var(--card-background-color);
   border-radius: var(--border-radius);
@@ -165,20 +340,23 @@
   color: var(--color-text-primary);
 }
 
-.tab-title {
+.dashboard-title {
   font-size: var(--font-size-heading3);
   color: var(--color-primary);
   margin-bottom: var(--spacing-xl);
+  text-align: center;
 }
 
-.metrics-grid {
+.dashboard-grid {
   display: grid;
-  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
+  grid-template-columns: repeat(2, 1fr);
+  grid-template-rows: repeat(2, 1fr);
   gap: var(--spacing-lg);
+  height: calc(100vh - 200px); /* Adjust based on header/footer height */
 }
 
-.metric-card {
-  background-color: #2C2C2C; /* Using card background color */
+.dashboard-section {
+  background-color: #2C2C2C;
   padding: var(--card-padding);
   border-radius: var(--border-radius);
   box-shadow: var(--card-shadow);
@@ -186,28 +364,33 @@
   flex-direction: column;
   align-items: center;
   text-align: center;
+  overflow: auto; /* Enable scrolling for content within sections */
 }
 
-.metric-card h3 {
+.dashboard-section h3 {
   color: var(--color-text-primary);
   margin-bottom: var(--spacing-md);
   font-size: var(--font-size-body);
   font-weight: var(--font-weight-medium);
 }
 
-.metric-value {
+.kpi-container {
+  margin-bottom: var(--spacing-lg);
+}
+
+.kpi-value {
   font-size: var(--font-size-heading1);
   color: var(--color-primary);
   font-weight: var(--font-weight-bold);
   margin-bottom: var(--spacing-sm);
 }
 
-.metric-value span {
+.kpi-value span {
   color: var(--color-accent);
 }
 
-.metric-description {
-  font-size: var(--font-size-small);
-  color: var(--color-text-secondary);
+.chart-container {
+  width: 100%;
+  margin-bottom: var(--spacing-md);
 }
 </style>
\ No newline at end of file
diff -ur --ex src/views/dashboard/WeatherStationIntegrationView.vue ../rezen-web/src/views/dashboard/WeatherStationIntegrationView.vue
--- src/views/dashboard/WeatherStationIntegrationView.vue	2025-08-04 20:35:59
+++ ../rezen-web/src/views/dashboard/WeatherStationIntegrationView.vue	2025-08-05 01:25:23
@@ -1,163 +1,406 @@
 <template>
-  <div class="tab-content">
-    <h2 class="tab-title">Weather Station Integration</h2>
+  <div class="weather-station-dashboard">
+    <h2 class="dashboard-title">Weather Station Integration</h2>
 
-    <div class="metrics-grid">
-      <div class="metric-card">
-        <h3>Current Temperature</h3>
-        <p class="metric-value">28°C</p>
-        <apexchart type="line" :options="tempChartOptions" :series="tempSeries"></apexchart>
-      </div>
+    <div class="dashboard-sections-grid">
+      <!-- Real-time and Historical Metrics Section -->
+      <div class="section-card metrics-section">
+        <h3>Real-time and Historical Metrics</h3>
 
-      <div class="metric-card">
-        <h3>Daily Rainfall</h3>
-        <p class="metric-value">5.2 mm</p>
-        <apexchart type="bar" :options="rainfallChartOptions" :series="rainfallSeries"></apexchart>
-      </div>
+        <div class="kpi-grid">
+          <div class="kpi-card">
+            <h4>Current Temperature</h4>
+            <p class="kpi-value">28°C</p>
+          </div>
+          <div class="kpi-card">
+            <h4>Current Humidity</h4>
+            <p class="kpi-value">65%</p>
+          </div>
+          <div class="kpi-card">
+            <h4>Current Wind Speed</h4>
+            <p class="kpi-value">15 km/h</p>
+          </div>
+          <div class="kpi-card">
+            <h4>Current Soil Moisture</h4>
+            <p class="kpi-value">35%</p>
+          </div>
+        </div>
 
-      <div class="metric-card">
-        <h3>Humidity</h3>
-        <p class="metric-value">65%</p>
+        <div class="chart-row">
+          <div class="chart-card">
+            <h4>Rainfall Analysis (Last 30 Days)</h4>
+            <!-- Bar Chart for Daily Rainfall -->
+            <apexchart type="bar" :options="dailyRainfallChartOptions" :series="dailyRainfallSeries"></apexchart>
+          </div>
+          <div class="chart-card">
+            <h4>Cumulative Monthly Rainfall (Last 12 Months)</h4>
+            <!-- Line Chart for Cumulative Monthly Rainfall -->
+            <apexchart type="line" :options="cumulativeRainfallChartOptions" :series="cumulativeRainfallSeries"></apexchart>
+          </div>
+        </div>
+
+        <div class="chart-row">
+          <div class="chart-card">
+            <h4>Temperature Analysis (Last 30 Days)</h4>
+            <!-- Dual-Axis Line Chart for Daily High and Low Temperatures -->
+            <apexchart type="line" :options="tempAnalysisChartOptions" :series="tempAnalysisSeries"></apexchart>
+          </div>
+        </div>
+
+        <div class="chart-row">
+          <div class="chart-card">
+            <h4>Humidity (Last 24 Hours)</h4>
+            <!-- Line Chart for Humidity over last 24 hours -->
+            <apexchart type="line" :options="humidity24hChartOptions" :series="humidity24hSeries"></apexchart>
+          </div>
+          <div class="chart-card">
+            <h4>Humidity (Last 30 Days)</h4>
+            <!-- Line Chart for Humidity over last 30 days -->
+            <apexchart type="line" :options="humidity30dChartOptions" :series="humidity30dSeries"></apexchart>
+          </div>
+        </div>
+
+        <div class="chart-row">
+          <div class="chart-card">
+            <h4>Soil Analysis (Last 7 Days)</h4>
+            <!-- Dual-Axis Line Chart for Soil Temperature and Soil Moisture -->
+            <apexchart type="line" :options="soilAnalysisChartOptions" :series="soilAnalysisSeries"></apexchart>
+          </div>
+        </div>
+
+        <div class="chart-row">
+          <div class="chart-card">
+            <h4>Average Wind Speed (Last 30 Days)</h4>
+            <!-- Bar Chart for Average Wind Speed -->
+            <apexchart type="bar" :options="windSpeedChartOptions" :series="windSpeedSeries"></apexchart>
+          </div>
+          <div class="chart-card">
+            <h4>Wind Direction Distribution</h4>
+            <!-- Radar Chart for Wind Direction -->
+            <apexchart type="radar" :options="windDirectionChartOptions" :series="windDirectionSeries"></apexchart>
+          </div>
+        </div>
       </div>
 
-      <div class="metric-card">
-        <h3>Soil Moisture</h3>
-        <p class="metric-value">35%</p>
+      <!-- Alert System for Anomalies Section -->
+      <div class="section-card alert-section">
+        <h3>Alert System for Anomalies</h3>
+
+        <div class="kpi-grid">
+          <div class="kpi-card">
+            <h4>Active Alerts</h4>
+            <p class="kpi-value">3</p>
+          </div>
+        </div>
+
+        <div class="chart-card">
+          <h4>Recent Alerts History</h4>
+          <!-- Timeline Chart or List for Alert History -->
+          <ul class="alert-list">
+            <li><span class="alert-status critical">Critical:</span> Drought stress detected in Zone A (2024-07-28 10:30 AM)</li>
+            <li><span class="alert-status warning">Warning:</span> High temperature alert for next 24 hours (2024-07-27 08:00 PM)</li>
+            <li><span class="alert-status info">Info:</span> Unusual rainfall pattern observed (2024-07-26 03:15 PM)</li>
+          </ul>
+        </div>
+
+        <div class="chart-card">
+          <h4>Alert Severity Breakdown</h4>
+          <!-- Pie Chart for Severity Level Distribution -->
+          <apexchart type="pie" :options="alertSeverityChartOptions" :series="alertSeveritySeries"></apexchart>
+        </div>
       </div>
     </div>
-
-    <div class="alert-system-placeholder chart-card">
-      <h3>Alert System</h3>
-      <p>Real-time alerts for anomalies (e.g., drought stress, heatwaves) would be displayed here.</p>
-      <ul>
-        <li><span class="alert-status critical">Critical:</span> Drought stress detected in Zone A.</li>
-        <li><span class="alert-status warning">Warning:</span> High temperature alert for next 24 hours.</li>
-      </ul>
-    </div>
   </div>
 </template>
 
-<script>
+<script setup>
 import { ref } from 'vue';
+import ApexCharts from 'apexcharts'; // Import ApexCharts
 
-export default {
-  name: 'WeatherStationIntegrationView',
-  setup() {
-    const tempSeries = ref([
-      {
-        name: 'Temperature (°C)',
-        data: [25, 26, 27, 28, 27, 29, 30, 29, 28, 27, 26, 25],
-      },
-    ]);
+// Helper function to get CSS variables
+const getCssVar = (name) => getComputedStyle(document.documentElement).getPropertyValue(name);
 
-    const tempChartOptions = ref({
-      chart: {
-        height: 200,
-        type: 'line',
-        toolbar: {
-          show: false,
-        },
-      },
-      colors: [getComputedStyle(document.documentElement).getPropertyValue('--color-primary')],
-      stroke: {
-        curve: 'smooth',
-      },
-      xaxis: {
-        categories: ['1h ago', '2h ago', '3h ago', '4h ago', '5h ago', '6h ago', '7h ago', '8h ago', '9h ago', '10h ago', '11h ago', '12h ago'],
-        labels: {
-          style: {
-            colors: getComputedStyle(document.documentElement).getPropertyValue('--chart-label-color'),
-          },
-        },
-      },
-      yaxis: {
-        title: {
-          text: 'Temperature (°C)',
-          style: {
-            color: getComputedStyle(document.documentElement).getPropertyValue('--chart-label-color'),
-          },
-        },
-        labels: {
-          style: {
-            colors: getComputedStyle(document.documentElement).getPropertyValue('--chart-label-color'),
-          },
-        },
-      },
-      grid: {
-        borderColor: '#444',
-      },
-      tooltip: {
-        theme: 'dark',
-      },
-    });
+// Mock Data and Chart Options for Real-time and Historical Metrics
 
-    const rainfallSeries = ref([
-      {
-        name: 'Rainfall (mm)',
-        data: [2.3, 1.5, 0.0, 5.2, 0.0, 0.8, 3.1],
-      },
-    ]);
+// Rainfall Analysis
+const dailyRainfallSeries = ref([
+  {
+    name: 'Daily Rainfall (mm)',
+    data: Array.from({ length: 30 }, () => Math.floor(Math.random() * 100) / 10),
+  },
+]);
 
-    const rainfallChartOptions = ref({
-      chart: {
-        height: 200,
-        type: 'bar',
-        toolbar: {
-          show: false,
+const dailyRainfallChartOptions = ref({
+  chart: {
+    type: 'bar',
+    height: 250,
+    toolbar: { show: false },
+  },
+  colors: [getCssVar('--color-primary')],
+  xaxis: {
+    categories: Array.from({ length: 30 }, (_, i) => `Day ${i + 1}`),
+    labels: { style: { colors: getCssVar('--chart-label-color') } },
+  },
+  yaxis: {
+    title: { text: 'Rainfall (mm)', style: { color: getCssVar('--chart-label-color') } },
+    labels: { style: { colors: getCssVar('--chart-label-color') } },
+  },
+  grid: { borderColor: '#444' },
+  tooltip: { theme: 'dark' },
+});
+
+const cumulativeRainfallSeries = ref([
+  {
+    name: 'Cumulative Rainfall (mm)',
+    data: Array.from({ length: 12 }, (_, i) => Math.floor(Math.random() * 200) + 50),
+  },
+]);
+
+const cumulativeRainfallChartOptions = ref({
+  chart: {
+    type: 'line',
+    height: 250,
+    toolbar: { show: false },
+  },
+  colors: [getCssVar('--color-accent')],
+  stroke: { curve: 'smooth' },
+  xaxis: {
+    categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
+    labels: { style: { colors: getCssVar('--chart-label-color') } },
+  },
+  yaxis: {
+    title: { text: 'Cumulative Rainfall (mm)', style: { color: getCssVar('--chart-label-color') } },
+    labels: { style: { colors: getCssVar('--chart-label-color') } },
+  },
+  grid: { borderColor: '#444' },
+  tooltip: { theme: 'dark' },
+});
+
+// Temperature Analysis
+const tempAnalysisSeries = ref([
+  {
+    name: 'High Temp (°C)',
+    data: Array.from({ length: 30 }, () => Math.floor(Math.random() * 10) + 25),
+  },
+  {
+    name: 'Low Temp (°C)',
+    data: Array.from({ length: 30 }, () => Math.floor(Math.random() * 10) + 15),
+  },
+]);
+
+const tempAnalysisChartOptions = ref({
+  chart: {
+    type: 'line',
+    height: 250,
+    toolbar: { show: false },
+  },
+  colors: [getCssVar('--color-primary'), getCssVar('--color-secondary')],
+  stroke: { curve: 'smooth' },
+  xaxis: {
+    categories: Array.from({ length: 30 }, (_, i) => `Day ${i + 1}`),
+    labels: { style: { colors: getCssVar('--chart-label-color') } },
+  },
+  yaxis: [
+    {
+      title: { text: 'High Temp (°C)', style: { color: getCssVar('--chart-label-color') } },
+      labels: { style: { colors: getCssVar('--chart-label-color') } },
+    },
+    {
+      opposite: true,
+      title: { text: 'Low Temp (°C)', style: { color: getCssVar('--chart-label-color') } },
+      labels: { style: { colors: getCssVar('--chart-label-color') } },
+    },
+  ],
+  grid: { borderColor: '#444' },
+  tooltip: { theme: 'dark' },
+});
+
+// Humidity Analysis
+const humidity24hSeries = ref([
+  {
+    name: 'Humidity (%)',
+    data: Array.from({ length: 24 }, () => Math.floor(Math.random() * 40) + 40),
+  },
+]);
+
+const humidity24hChartOptions = ref({
+  chart: {
+    type: 'line',
+    height: 250,
+    toolbar: { show: false },
+  },
+  colors: [getCssVar('--color-primary')],
+  stroke: { curve: 'smooth' },
+  xaxis: {
+    categories: Array.from({ length: 24 }, (_, i) => `${i}h`),
+    labels: { style: { colors: getCssVar('--chart-label-color') } },
+  },
+  yaxis: {
+    title: { text: 'Humidity (%)', style: { color: getCssVar('--chart-label-color') } },
+    labels: { style: { colors: getCssVar('--chart-label-color') } },
+  },
+  grid: { borderColor: '#444' },
+  tooltip: { theme: 'dark' },
+});
+
+const humidity30dSeries = ref([
+  {
+    name: 'Humidity (%)',
+    data: Array.from({ length: 30 }, () => Math.floor(Math.random() * 40) + 40),
+  },
+]);
+
+const humidity30dChartOptions = ref({
+  chart: {
+    type: 'line',
+    height: 250,
+    toolbar: { show: false },
+  },
+  colors: [getCssVar('--color-accent')],
+  stroke: { curve: 'smooth' },
+  xaxis: {
+    categories: Array.from({ length: 30 }, (_, i) => `Day ${i + 1}`),
+    labels: { style: { colors: getCssVar('--chart-label-color') } },
+  },
+  yaxis: {
+    title: { text: 'Humidity (%)', style: { color: getCssVar('--chart-label-color') } },
+    labels: { style: { colors: getCssVar('--chart-label-color') } },
+  },
+  grid: { borderColor: '#444' },
+  tooltip: { theme: 'dark' },
+});
+
+// Soil Analysis
+const soilAnalysisSeries = ref([
+  {
+    name: 'Soil Temperature (°C)',
+    data: Array.from({ length: 7 }, () => Math.floor(Math.random() * 10) + 20),
+  },
+  {
+    name: 'Soil Moisture (%)',
+    data: Array.from({ length: 7 }, () => Math.floor(Math.random() * 30) + 20),
+  },
+]);
+
+const soilAnalysisChartOptions = ref({
+  chart: {
+    type: 'line',
+    height: 250,
+    toolbar: { show: false },
+  },
+  colors: [getCssVar('--color-primary'), getCssVar('--color-secondary')],
+  stroke: { curve: 'smooth' },
+  xaxis: {
+    categories: ['Day 1', 'Day 2', 'Day 3', 'Day 4', 'Day 5', 'Day 6', 'Day 7'],
+    labels: { style: { colors: getCssVar('--chart-label-color') } },
+  },
+  yaxis: [
+    {
+      title: { text: 'Soil Temperature (°C)', style: { color: getCssVar('--chart-label-color') } },
+      labels: { style: { colors: getCssVar('--chart-label-color') } },
+    },
+    {
+      opposite: true,
+      title: { text: 'Soil Moisture (%)', style: { color: getCssVar('--chart-label-color') } },
+      labels: { style: { colors: getCssVar('--chart-label-color') } },
+    },
+  ],
+  grid: { borderColor: '#444' },
+  tooltip: { theme: 'dark' },
+});
+
+// Wind Analysis
+const windSpeedSeries = ref([
+  {
+    name: 'Average Wind Speed (km/h)',
+    data: Array.from({ length: 30 }, () => Math.floor(Math.random() * 20) + 5),
+  },
+]);
+
+const windSpeedChartOptions = ref({
+  chart: {
+    type: 'bar',
+    height: 250,
+    toolbar: { show: false },
+  },
+  colors: [getCssVar('--color-primary')],
+  xaxis: {
+    categories: Array.from({ length: 30 }, (_, i) => `Day ${i + 1}`),
+    labels: { style: { colors: getCssVar('--chart-label-color') } },
+  },
+  yaxis: {
+    title: { text: 'Wind Speed (km/h)', style: { color: getCssVar('--chart-label-color') } },
+    labels: { style: { colors: getCssVar('--chart-label-color') } },
+  },
+  grid: { borderColor: '#444' },
+  tooltip: { theme: 'dark' },
+});
+
+const windDirectionSeries = ref([
+  {
+    name: 'Wind Direction',
+    data: [40, 80, 60, 30, 90, 50, 70, 20], // Mock data for N, NE, E, SE, S, SW, W, NW
+  },
+]);
+
+const windDirectionChartOptions = ref({
+  chart: {
+    type: 'radar',
+    height: 250,
+    toolbar: { show: false },
+  },
+  colors: [getCssVar('--color-accent')],
+  xaxis: {
+    categories: ['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW'],
+    labels: { style: { colors: getCssVar('--chart-label-color') } },
+  },
+  yaxis: {
+    labels: { show: false },
+  },
+  plotOptions: {
+    radar: {
+      polygons: {
+        strokeColors: '#444',
+        fill: {
+          colors: ['#2C2C2C', '#2C2C2C'],
         },
       },
-      colors: [getComputedStyle(document.documentElement).getPropertyValue('--color-primary')],
-      plotOptions: {
-        bar: {
-          horizontal: false,
-          columnWidth: '55%',
-          endingShape: 'rounded',
-        },
-      },
-      dataLabels: {
-        enabled: false,
-      },
-      xaxis: {
-        categories: ['Day 1', 'Day 2', 'Day 3', 'Day 4', 'Day 5', 'Day 6', 'Day 7'],
-        labels: {
-          style: {
-            colors: getComputedStyle(document.documentElement).getPropertyValue('--chart-label-color'),
-          },
-        },
-      },
-      yaxis: {
-        title: {
-          text: 'Rainfall (mm)',
-          style: {
-            color: getComputedStyle(document.documentElement).getPropertyValue('--chart-label-color'),
-          },
-        },
-        labels: {
-          style: {
-            colors: getComputedStyle(document.documentElement).getPropertyValue('--chart-label-color'),
-          },
-        },
-      },
-      grid: {
-        borderColor: '#444',
-      },
-      tooltip: {
-        theme: 'dark',
-      },
-    });
+    },
+  },
+  tooltip: { theme: 'dark' },
+});
 
-    return {
-      tempSeries,
-      tempChartOptions,
-      rainfallSeries,
-      rainfallChartOptions,
-    };
+// Mock Data and Chart Options for Alert System for Anomalies
+const alertSeveritySeries = ref([44, 55, 13]); // Critical, Warning, Info
+
+const alertSeverityChartOptions = ref({
+  chart: {
+    type: 'pie',
+    height: 250,
   },
-};
+  labels: ['Critical', 'Warning', 'Info'],
+  colors: ['#FF5252', '#FFC107', '#2196F3'], // Red, Amber, Blue
+  legend: {
+    position: 'bottom',
+    labels: {
+      colors: getCssVar('--chart-label-color'),
+    },
+  },
+  dataLabels: {
+    enabled: true,
+    style: {
+      colors: ['#fff'],
+    },
+    formatter: function (val, opts) {
+      return opts.w.globals.series[opts.seriesIndex] + "%"
+    }
+  },
+  tooltip: { theme: 'dark' },
+});
 </script>
 
 <style scoped>
-.tab-content {
+.weather-station-dashboard {
   padding: var(--spacing-lg);
   background-color: var(--card-background-color);
   border-radius: var(--border-radius);
@@ -165,62 +408,103 @@
   color: var(--color-text-primary);
 }
 
-.tab-title {
+.dashboard-title {
   font-size: var(--font-size-heading3);
   color: var(--color-primary);
   margin-bottom: var(--spacing-xl);
+  text-align: center;
 }
 
-.metrics-grid {
+.dashboard-sections-grid {
   display: grid;
-  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
-  gap: var(--spacing-lg);
-  margin-bottom: var(--spacing-xl);
+  grid-template-columns: 1fr; /* Single column for smaller screens */
+  gap: var(--spacing-xl);
 }
 
-.metric-card {
+@media (min-width: 1024px) {
+  .dashboard-sections-grid {
+    grid-template-columns: 2fr 1fr; /* Two columns for larger screens */
+  }
+}
+
+.section-card {
   background-color: #2C2C2C;
   padding: var(--card-padding);
   border-radius: var(--border-radius);
   box-shadow: var(--card-shadow);
+  margin-bottom: var(--spacing-xl);
+}
+
+.section-card h3 {
+  color: var(--color-accent);
+  margin-bottom: var(--spacing-lg);
+  font-size: var(--font-size-heading4);
+  font-weight: var(--font-weight-medium);
   text-align: center;
 }
 
-.metric-card h3 {
-  color: var(--color-text-primary);
-  margin-bottom: var(--spacing-md);
+.kpi-grid {
+  display: grid;
+  grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
+  gap: var(--spacing-md);
+  margin-bottom: var(--spacing-lg);
+}
+
+.kpi-card {
+  background-color: var(--color-background-soft);
+  padding: var(--spacing-md);
+  border-radius: var(--border-radius-sm);
+  text-align: center;
+  box-shadow: var(--card-shadow);
+}
+
+.kpi-card h4 {
+  color: var(--color-text-secondary);
   font-size: var(--font-size-body);
-  font-weight: var(--font-weight-medium);
+  margin-bottom: var(--spacing-xs);
 }
 
-.metric-value {
-  font-size: var(--font-size-heading1);
+.kpi-value {
+  font-size: var(--font-size-heading2);
   color: var(--color-primary);
   font-weight: var(--font-weight-bold);
-  margin-bottom: var(--spacing-sm);
 }
 
-.alert-system-placeholder {
-  background-color: #2C2C2C;
+.chart-row {
+  display: grid;
+  grid-template-columns: 1fr;
+  gap: var(--spacing-lg);
+  margin-bottom: var(--spacing-lg);
+}
+
+@media (min-width: 768px) {
+  .chart-row {
+    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
+  }
+}
+
+.chart-card {
+  background-color: var(--color-background-soft);
   padding: var(--card-padding);
   border-radius: var(--border-radius);
   box-shadow: var(--card-shadow);
 }
 
-.alert-system-placeholder h3 {
-  color: var(--color-accent);
+.chart-card h4 {
+  color: var(--color-text-primary);
   margin-bottom: var(--spacing-md);
   font-size: var(--font-size-body);
   font-weight: var(--font-weight-medium);
+  text-align: center;
 }
 
-.alert-system-placeholder ul {
+.alert-list {
   list-style: none;
   padding: 0;
   margin: 0;
 }
 
-.alert-system-placeholder li {
+.alert-list li {
   margin-bottom: var(--spacing-sm);
   font-size: var(--font-size-body);
   color: var(--color-text-secondary);
@@ -237,5 +521,9 @@
 
 .alert-status.warning {
   color: #FFC107; /* Amber for warning alerts */
+}
+
+.alert-status.info {
+  color: #2196F3; /* Blue for info alerts */
 }
 </style>
\ No newline at end of file
